#include "../imports/stdlib.fc";
#include "utils/jetton_utils.fc";
#include "op_codes.fc";
#include "errors.fc";
#include "math/bc_math.fc";
#include "dex/stonfi.fc";

global int   storage::total_supply;
global slice storage::admin_address;
global cell  storage::content;
global cell  storage::jetton_wallet_code;
global int   storage::ton_collected;
global int   storage::max_ton;
global int   storage::bc_supply;
global int   storage::liq_supply;
global slice storage::author_address;
global slice storage::fee_address;
global int   storage::trade_fee_numerator;
global int   storage::trade_fee_denominator;
global int   storage::trading_enabled;
global slice storage::router_address;
global slice storage::router_pton_wallet_address;

() load_data() impure inline {
    slice ds = get_data().begin_parse();

    storage::total_supply = ds~load_coins();
    storage::admin_address = ds~load_msg_addr();
    storage::content = ds~load_ref();
    storage::jetton_wallet_code = ds~load_ref();
    storage::ton_collected = ds~load_coins();
    storage::max_ton = ds~load_coins();

    slice bc_ds = ds~load_ref().begin_parse();
    storage::bc_supply = bc_ds~load_coins();
    storage::liq_supply = bc_ds~load_coins();
    storage::author_address = bc_ds~load_msg_addr();
    storage::fee_address = bc_ds~load_msg_addr();
    storage::trade_fee_numerator = bc_ds~load_uint(16);
    storage::trade_fee_denominator = bc_ds~load_uint(16);
    storage::trading_enabled = bc_ds~load_uint(1);

    slice router_ds = bc_ds~load_ref().begin_parse();
    storage::router_address = router_ds~load_msg_addr();
    storage::router_pton_wallet_address = router_ds~load_msg_addr();
}

() save_data() impure inline {
    set_data(
        begin_cell()
            .store_coins(storage::total_supply)
            .store_slice(storage::admin_address)
            .store_ref(storage::content)
            .store_ref(storage::jetton_wallet_code)
            .store_coins(storage::ton_collected)
            .store_coins(storage::max_ton)
            .store_ref(
                begin_cell()
                    .store_coins(storage::bc_supply)
                    .store_coins(storage::liq_supply)
                    .store_slice(storage::author_address)
                    .store_slice(storage::fee_address)
                    .store_uint(storage::trade_fee_numerator, 16)
                    .store_uint(storage::trade_fee_denominator, 16)
                    .store_uint(storage::trading_enabled, 1)
                    .store_ref(
                        begin_cell()
                            .store_slice(storage::router_address)
                            .store_slice(storage::router_pton_wallet_address)
                        .end_cell()
                    )
                .end_cell()
            )
        .end_cell()
    );
}

const int gas::purchase = 50000000;              ;; 0.05 TON
const int gas::sell = 50000000;                  ;; 0.05 TON
const int gas::auxiliary_costs = 100000000;      ;; 0.1 TON

const int additional_to_return_value = 50000000; ;; 0.05 TON

int storage_fees() asm "STORAGEFEES";

() send_fees(int amount) impure inline {
    cell msg_one = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(storage::fee_address)
        .store_coins(amount / 2)
        .store_uint(op::fee_payout, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 32)
        .store_query_id(0)
    .end_cell();
    send_raw_message(msg_one, SEND_MODE_PAY_FEES_SEPARATELY);

    cell msg_two = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(storage::author_address)
        .store_coins(amount / 2)
        .store_uint(op::fee_payout, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 32)
        .store_query_id(0)
    .end_cell();
    send_raw_message(msg_two, SEND_MODE_PAY_FEES_SEPARATELY);
}

() mint_tokens(slice to_address, cell jetton_wallet_code, int amount, cell master_msg) impure {
    cell state_init = calculate_jetton_wallet_state_init(to_address, my_address(), jetton_wallet_code);
    slice to_wallet_address = calc_jetton_wallet_address(state_init);
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to_wallet_address)
        .store_coins(amount)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(master_msg)
    .end_cell();
    send_raw_message(msg, SEND_MODE_PAY_FEES_SEPARATELY);
}

() send_mint_token(slice to_address, int amount, slice response_address, int value, int mode) impure {
    var master_msg = begin_cell()
        .store_uint(op::internal_transfer, 32)
        .store_uint(0, 64)
        .store_coins(amount)
        .store_uint(0, 2)
        .store_slice(response_address)
        .store_coins(0)
        .store_uint(0, 1)
    .end_cell();

    cell state_init = calculate_jetton_wallet_state_init(to_address, my_address(), storage::jetton_wallet_code);
    slice to_wallet_address = calc_jetton_wallet_address(state_init);
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to_wallet_address)
        .store_coins(value)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(master_msg)
    .end_cell();
    send_raw_message(msg, mode);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();

    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    load_data();

    if (op == op::purchase) {
        throw_if(error::trading_disabled, storage::trading_enabled == 0);
        throw_if(error::out_of_gas, msg_value < gas::purchase);

        slice buyer_address = sender_address;
        msg_value -= gas::purchase;

        if (~ slice_empty?(in_msg_body)) {
            buyer_address = in_msg_body~load_msg_addr();
        }

        ;; int min_receive_amount = in_msg_body~load_coins();
        (int ton_fees, int coins_to_buy, int tons_consumed) = calc_coins_for_tons(msg_value, storage::bc_supply, storage::total_supply, storage::max_ton, storage::trade_fee_numerator, storage::trade_fee_denominator);

        throw_if(error::zero_coins, coins_to_buy <= 0);
        ;; throw_if(error::slippage, (coins_to_buy < min_receive_amount) | coins_to_buy <= 0);

        int to_return = msg_value - tons_consumed;
        storage::total_supply += coins_to_buy;
        storage::ton_collected += tons_consumed - ton_fees;

        send_fees(ton_fees);

        int should_close_trading = storage::total_supply >= storage::bc_supply;
        if (should_close_trading) {
            to_return += additional_to_return_value;
        } else {
            raw_reserve(tons_consumed - ton_fees + storage_fees(), 4 + SEND_MODE_BOUNCE_ON_ACTION_FAIL);
        }

        send_mint_token(
            buyer_address,
            coins_to_buy,
            buyer_address,
            to_return,
            should_close_trading ? (SEND_MODE_REGULAR | SEND_MODE_BOUNCE_ON_ACTION_FAIL) : (SEND_MODE_CARRY_ALL_BALANCE | SEND_MODE_BOUNCE_ON_ACTION_FAIL)
        );

        if (should_close_trading) {
            storage::trading_enabled = 0;
            
            int ton_liq = storage::ton_collected - gas::total_lp_provide_gas - gas::auxiliary_costs - additional_to_return_value;
            provide_ton_lp(ton_liq, storage::router_address, storage::router_pton_wallet_address, storage::jetton_wallet_code);

            storage::total_supply += storage::liq_supply;
            provide_jetton_lp(storage::liq_supply, storage::router_address, storage::router_pton_wallet_address, storage::jetton_wallet_code);
        }

        save_data();
        return ();
    }

    if (op == op::sell) {
        throw_if(error::trading_disabled, storage::trading_enabled == 0);

        int jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        ;; int min_receive_amount = in_msg_body~load_coins();

        throw_unless(error::invalid_jetton_wallet, equal_slice_bits(calculate_jetton_wallet_address(from_address, my_address(),storage::jetton_wallet_code), sender_address));
        throw_if(error::out_of_gas, msg_value < gas::sell);
        throw_if(error::out_of_bc_supply, jetton_amount > storage::bc_supply);

        (int ton_fees, int tons_to_return) = calc_tons_for_coins(jetton_amount, storage::bc_supply, storage::total_supply, storage::max_ton, storage::trade_fee_numerator, storage::trade_fee_denominator);
        ;; throw_if(error::slippage, tons_to_return < min_receive_amount);

        storage::total_supply -= jetton_amount;
        storage::ton_collected -= tons_to_return - ton_fees;

        raw_reserve(tons_to_return + ton_fees - storage_fees(), 4 + 8 + SEND_MODE_BOUNCE_ON_ACTION_FAIL);
        send_fees(ton_fees);

        var msg = begin_cell()
            .store_uint(0x10, 6)
            .store_slice(from_address)
            .store_coins(0)
            .store_uint(op::excesses, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 32)
            .store_query_id(query_id)
        .end_cell();

        send_raw_message(msg, SEND_MODE_CARRY_ALL_BALANCE | SEND_MODE_BOUNCE_ON_ACTION_FAIL);

        save_data();
        return ();
    }

    if (op == op::mint) {
        throw_unless(error::unauthorized_mint_request, equal_slice_bits(sender_address, storage::admin_address));
        slice to_address = in_msg_body~load_msg_addr();
        int jetton_amount = in_msg_body~load_coins();
        int forward_ton_amount = in_msg_body~load_coins();
        int total_ton_amount = in_msg_body~load_coins();
        throw_unless(error::discovery_fee_not_matched, total_ton_amount > forward_ton_amount);
        cell mint_request = begin_cell()
            .store_op(op::internal_transfer)
            .store_query_id(query_id)
            .store_coins(jetton_amount)
            .store_uint(0, 2)
            .store_slice(my_address())
            .store_coins(forward_ton_amount)
            .store_uint(0, 1)
        .end_cell();
        mint_tokens(to_address, storage::jetton_wallet_code, total_ton_amount, mint_request);
        storage::total_supply += jetton_amount;
        save_data();
        return ();
    }

    if (op == op::burn_notification) {
        int jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        throw_unless(error::unauthorized_burn_request,
            equal_slice_bits(calculate_jetton_wallet_address(from_address, my_address(), storage::jetton_wallet_code), sender_address)
        );
        slice response_address = in_msg_body~load_msg_addr();
        if (response_address.preload_uint(2) != 0) {
            var msg = begin_cell()
                .store_uint(0x10, 6)
                .store_slice(response_address)
                .store_coins(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_op(op::excesses)
                .store_query_id(query_id)
            .end_cell();
            send_raw_message(msg, SEND_MODE_IGNORE_ERRORS | SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);
        }
        storage::total_supply -= jetton_amount;
        save_data();
        return ();
    }

    if (op == op::provide_wallet_address) {
        slice owner_address = in_msg_body~load_msg_addr();
        int include_address? = in_msg_body~load_uint(1);

        cell included_address = include_address?
                ? begin_cell().store_slice(owner_address).end_cell()
                : null();
        var msg = begin_cell()
                .store_msg_flags_and_address_none(BOUNCEABLE)
                .store_slice(sender_address)
                .store_coins(0)
                .store_prefix_only_body()
                .store_op(op::take_wallet_address)
                .store_query_id(query_id);

        if (is_resolvable?(owner_address)) {
            msg = msg.store_slice(calculate_jetton_wallet_address(owner_address, my_address(), storage::jetton_wallet_code));
        } else {
            msg = msg.store_address_none(); ;; addr_none
        }
        send_raw_message(msg.store_maybe_ref(included_address).end_cell(), SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);
        return ();
    }

    if (op == op::change_admin) { ;; change admin
        throw_unless(error::unauthorized_change_admin_request, equal_slice_bits(sender_address, storage::admin_address));
        storage::admin_address = in_msg_body~load_msg_addr();
        save_data();
        return ();
    }

    if (op == op::change_content) {
        throw_unless(error::unauthorized_change_content_request, equal_slice_bits(sender_address, storage::admin_address));
        storage::content = in_msg_body~load_ref();
        save_data();
        return ();
    }

    if (op == op::change_author) {
        throw_unless(error::unauthorized_change_author_request, equal_slice_bits(sender_address, storage::author_address));
        storage::author_address = in_msg_body~load_msg_addr();
        save_data();
        return ();
    }

    if (op == op::change_fees) {
        throw_unless(error::unauthorized_change_fees_request, equal_slice_bits(sender_address, storage::admin_address));
        storage::fee_address = in_msg_body~load_msg_addr();
        storage::trade_fee_numerator = in_msg_body~load_uint(16);
        storage::trade_fee_denominator = in_msg_body~load_uint(16);
        save_data();
        return ();
    }

    if (op == op::unlock_wallet_callback) {
        slice from_address = in_msg_body~load_msg_addr();

        throw_unless(error::invalid_jetton_wallet, equal_slice_bits(calculate_jetton_wallet_address(from_address, my_address(),storage::jetton_wallet_code), sender_address));
        throw_if(error::trading_enabled, storage::trading_enabled == 1);

        send_raw_message(
            begin_cell()
                .store_uint(0x10, 6)
                .store_slice(sender_address)
                .store_coins(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(op::unlock_wallet_excess, 32)
                .store_uint(0, 64)
            .end_cell(),
            SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE
        );
        return ();
    }

    if (op == op::upgrade) {
        cell new_data = in_msg_body~load_ref();
        cell new_code = in_msg_body~load_ref();
        set_data(new_data);
        set_code(new_code);
        return ();
    }

    throw(error::unknown_op);
}

(int, int, slice, cell, cell) get_jetton_data() method_id {
    load_data();
    return (storage::total_supply, -1, storage::admin_address, storage::content, storage::jetton_wallet_code);
}

slice get_wallet_address(slice owner_address) method_id {
    load_data();
    return calculate_jetton_wallet_address(owner_address, my_address(), storage::jetton_wallet_code);
}

int get_coin_price() method_id {
    load_data();
    return calc_coin_price(storage::total_supply, storage::bc_supply, storage::max_ton);
}

(int, int) get_coins_for_tons(int tons) method_id {
    load_data();
    (int fees, int coins, _) = calc_coins_for_tons(tons, storage::bc_supply, storage::total_supply, storage::max_ton, storage::trade_fee_numerator, storage::trade_fee_denominator);
    return coins <= 0 ? (0, 0) : (fees, coins);
}

(int, int) get_tons_for_coins(int coins) method_id {
    load_data();
    (int fees, int tons) = calc_tons_for_coins(coins, storage::bc_supply, storage::total_supply, storage::max_ton, storage::trade_fee_numerator, storage::trade_fee_denominator);
    return tons <= 0 ? (0, 0) : (fees, tons);
}

var get_bc_data() method_id {
    load_data();
    (int full_price_ton_fees, int full_price_ton_need) = calc_tons_for_all_coins(storage::bc_supply, storage::total_supply, storage::max_ton, storage::trade_fee_numerator, storage::trade_fee_denominator);
    return (
        storage::total_supply,
        storage::admin_address,
        storage::content,
        storage::jetton_wallet_code,
        storage::ton_collected,
        storage::max_ton,
        storage::bc_supply,
        storage::liq_supply,
        storage::author_address,
        storage::fee_address,
        storage::trade_fee_numerator,
        storage::trade_fee_denominator,
        storage::trading_enabled,
        full_price_ton_fees,
        full_price_ton_need
    );
}