#include "../imports/stdlib.fc";
#include "utils/jetton_utils.fc";
#include "errors.fc";
#include "op_codes.fc";
#include "utils/messages.fc";

const int min_tons_for_storage = 10000000; ;;ONE_TON / 100;
;; Note that 2 * gas_consumptions is expected to be able to cover fees on both wallets (sender and receiver)
;; and also constant fees on inter-wallet interaction, in particular fwd fee on state_init transfer
;; that means that you need to reconsider this fee when:
;; a) jetton logic become more costly
;; b) jetton-wallet code become larger or smalle
;; c) global fee changes / different workchain
const int gas_consumption = 14000000;

const int gas_sell = 50000000;

{-
  Storage
  storage#_ balance:Coins owner_address:MsgAddressInt jetton_master_address:MsgAddressInt jetton_wallet_code:^Cell = Storage;
-}

(int, int, slice, slice, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_uint(1),
        ds~load_coins(),
        ds~load_msg_addr(),
        ds~load_msg_addr(),
        ds~load_ref()
    );
}

() save_data(int locked, int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) impure inline {
    set_data(pack_jetton_wallet_data(
        locked,
        balance,
        owner_address,
        jetton_master_address,
        jetton_wallet_code
    ));
}

{-
  transfer query_id:uint64 amount:(VarUInteger 16) destination:MsgAddress
           response_destination:MsgAddress custom_payload:(Maybe ^Cell)
           forward_ton_amount:(VarUInteger 16) forward_payload:(Either Cell ^Cell)
           = InternalMsgBody;
  internal_transfer  query_id:uint64 amount:(VarUInteger 16) from:MsgAddress
                     response_address:MsgAddress
                     forward_ton_amount:(VarUInteger 16)
                     forward_payload:(Either Cell ^Cell) 
                     = InternalMsgBody;
-}

;; read from in_msg_body params of transfer, build transfer message and send it to counterparty jetton wallet
() send_tokens(slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure inline_ref {
    int query_id = in_msg_body~load_query_id();
    int jetton_amount = in_msg_body~load_coins();
    slice to_owner_address = in_msg_body~load_msg_addr();
    force_chain(to_owner_address);
    (int locked, int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();
    throw_if(error::locked_wallet, locked == 1);

    balance -= jetton_amount;

    throw_unless(error::unauthorized_transfer, equal_slice_bits(owner_address, sender_address));
    throw_unless(error::not_enough_jettons, balance >= 0);

    cell state_init = calculate_jetton_wallet_state_init(to_owner_address, jetton_master_address, jetton_wallet_code);
    slice to_wallet_address = calc_jetton_wallet_address(state_init);
    slice response_address = in_msg_body~load_msg_addr();
    cell custom_payload = in_msg_body~load_maybe_ref();
    int forward_ton_amount = in_msg_body~load_coins();
    throw_unless(error::malformed_forward_payload, slice_bits(in_msg_body) >= 1);
    slice either_forward_payload = in_msg_body;
    var msg_body = begin_cell()
            .store_op(op::internal_transfer)
            .store_query_id(query_id)
            .store_coins(jetton_amount)
            .store_slice(owner_address)
            .store_slice(response_address)
            .store_coins(forward_ton_amount)
            .store_slice(either_forward_payload)
            .end_cell();
    var msg = begin_cell()
        .store_msg_flag(msg_flag::bounceable)
        .store_slice(to_wallet_address)
        .store_coins(0)
        .store_msgbody_prefix_stateinit(state_init, msg_body);


    int fwd_count = forward_ton_amount ? 2 : 1;
    throw_unless(
        error::not_enough_tons,
        msg_value > forward_ton_amount +
        ;; 3 messages: wal1->wal2,  wal2->owner, wal2->response
        ;; but last one is optional (it is ok if it fails)
        fwd_count * fwd_fee +
        (2 * gas_consumption + min_tons_for_storage)
    );
    ;; universal message send fee calculation may be activated here
    ;; by using this instead of fwd_fee
    ;; msg_fwd_fee(to_wallet, msg_body, state_init, 15)

    send_raw_message(msg.end_cell(), SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE); ;; revert on errors
    save_data(locked, balance, owner_address, jetton_master_address, jetton_wallet_code);
}

{-
  internal_transfer  query_id:uint64 amount:(VarUInteger 16) from:MsgAddress
                     response_address:MsgAddress
                     forward_ton_amount:(VarUInteger 16)
                     forward_payload:(Either Cell ^Cell) 
                     = InternalMsgBody;
-}

;; read incoming transfer message, authorize by address, update balance and send notifications/excesses
() receive_tokens(slice in_msg_body, slice sender_address, int my_ton_balance, int fwd_fee, int msg_value) impure inline_ref {
  ;; NOTE we can not allow fails in action phase since in that case there will be
  ;; no bounce. Thus check and throw in computation phase.
    (int locked, int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();
    int query_id = in_msg_body~load_query_id();
    int jetton_amount = in_msg_body~load_coins();
    balance += jetton_amount;
    slice from_address = in_msg_body~load_msg_addr();
    slice response_address = in_msg_body~load_msg_addr();
    throw_unless(error::unauthorized_incoming_transfer,
        equal_slice_bits(jetton_master_address, sender_address)
        |
        equal_slice_bits(calculate_jetton_wallet_address(from_address, jetton_master_address, jetton_wallet_code), sender_address)
    );
    int forward_ton_amount = in_msg_body~load_coins();

    int ton_balance_before_msg = my_ton_balance - msg_value;
    ;;int storage_fee = min_tons_for_storage - min(ton_balance_before_msg, min_tons_for_storage);
    ;;msg_value -= (storage_fee + gas_consumption);
    if (forward_ton_amount) {
        msg_value -= (forward_ton_amount + fwd_fee);
        slice either_forward_payload = in_msg_body;

        var msg_body = begin_cell()
            .store_op(op::transfer_notification)
            .store_query_id(query_id)
            .store_coins(jetton_amount)
            .store_slice(from_address)
            .store_slice(either_forward_payload)
            .end_cell();

        var msg = begin_cell()
            .store_msg_flag(msg_flag::non_bounceable) ;; we should not bounce here cause receiver can have uninitialized contract
            .store_slice(owner_address)
            .store_coins(forward_ton_amount)
            .store_msgbody_prefix_ref(msg_body)
            .end_cell();

        send_raw_message(msg, SEND_MODE_PAY_FEES_SEPARATELY);
    }

    raw_reserve(max(ton_balance_before_msg, min_tons_for_storage), 2);
    if ((response_address.preload_uint(2) != 0) & (msg_value > 0)) {
        var msg = begin_cell()
            .store_msg_flag(msg_flag::non_bounceable)
            .store_slice(response_address)
            .store_coins(0)
            .store_msgbody_prefix_slice()
            .store_op(op::excesses)
            .store_query_id(query_id)
            .end_cell();
        send_raw_message(msg, SEND_MODE_CARRY_ALL_BALANCE | SEND_MODE_IGNORE_ERRORS);
    }
    save_data(locked, balance, owner_address, jetton_master_address, jetton_wallet_code);
}

() burn_tokens(slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure inline_ref {
    ;; NOTE we can not allow fails in action phase since in that case there will be
    ;; no bounce. Thus check and throw in computation phase.
    (int locked, int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();
    int query_id = in_msg_body~load_query_id();
    int jetton_amount = in_msg_body~load_coins();
    slice response_address = in_msg_body~load_msg_addr();
    ;; ignore custom payload
    ;; slice custom_payload = in_msg_body~load_dict();
    balance -= jetton_amount;
    throw_unless(error::unauthorized_transfer, equal_slice_bits(owner_address, sender_address));
    throw_unless(error::not_enough_jettons, balance >= 0);
    throw_unless(error::burn_fee_not_matched, msg_value > fwd_fee + 2 * gas_consumption);

    var msg_body = begin_cell()
        .store_op(op::burn_notification)
        .store_query_id(query_id)
        .store_coins(jetton_amount)
        .store_slice(owner_address)
        .store_slice(response_address)
    .end_cell();

    var msg = begin_cell()
        .store_msg_flag(msg_flag::bounceable)
        .store_slice(jetton_master_address)
        .store_coins(0) ;; msg value
        .store_msgbody_prefix_ref(msg_body)
    .end_cell();

    send_raw_message(msg, SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);
    save_data(locked, balance, owner_address, jetton_master_address, jetton_wallet_code);
}

() sell_tokens(slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure inline_ref {
    (int locked, int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();
    int query_id = in_msg_body~load_query_id();
    int jetton_amount = in_msg_body~load_coins();
    ;; int min_receive_amount = in_msg_body~load_coins();

    throw_unless(error::unauthorized_transfer, equal_slice_bits(owner_address, sender_address));
    throw_unless(error::not_enough_jettons, balance >= 0);
    throw_unless(error::sell_fee_not_matched, msg_value > fwd_fee + gas_sell);

    balance -= jetton_amount;

    var msg_body = begin_cell()
        .store_op(op::sell)
        .store_query_id(query_id)
        .store_coins(jetton_amount)
        .store_slice(owner_address)
    .end_cell();

    var msg = begin_cell()
        .store_msg_flag(msg_flag::bounceable)
        .store_slice(jetton_master_address)
        .store_coins(0)
        .store_msgbody_prefix_ref(msg_body)
    .end_cell();

    send_raw_message(msg, SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);
    save_data(locked, balance, owner_address, jetton_master_address, jetton_wallet_code);
}

() on_bounce(slice in_msg_body) impure inline_ref {
    in_msg_body~skip_bounce_flag();
    (int locked, int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();
    int op = in_msg_body~load_op();
    throw_unless(error::unknown_action_bounced, (op == op::internal_transfer) | (op == op::burn_notification));
    int query_id = in_msg_body~load_query_id();
    int jetton_amount = in_msg_body~load_coins();
    balance += jetton_amount;
    save_data(locked, balance, owner_address, jetton_master_address, jetton_wallet_code);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        on_bounce(in_msg_body);
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs

    int op = in_msg_body~load_op();

    if (op == op::transfer) { ;; outgoing transfer
        send_tokens(in_msg_body, sender_address, msg_value, fwd_fee);
        return ();
    }

    if (op == op::internal_transfer) { ;; incoming transfer
        receive_tokens(in_msg_body, sender_address, my_balance, fwd_fee, msg_value);
        return ();
    }

    if (op == op::burn) { ;; burn
        burn_tokens(in_msg_body, sender_address, msg_value, fwd_fee);
        return ();
    }

    if (op == op::sell) { ;; sell
        sell_tokens(in_msg_body, sender_address, msg_value, fwd_fee);
        return ();
    }

    (int locked, int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();
    ;; Withdraw tons or jettons which accidentally were sent to this jettonWallet
    if (op == op::withdraw_tons) {
        throw_unless(error::unauthorized_transfer, equal_slice_bits(owner_address, sender_address));
        throw_if(error::locked_wallet, locked == 1);
        raw_reserve(min_tons_for_storage, 0);
        var msg = begin_cell()
            .store_msg_flag(msg_flag::non_bounceable)
            .store_slice(owner_address)
            .store_coins(0)
            .store_msgbody_prefix_slice()
            .store_op(op::excesses)
            .store_query_id(in_msg_body~load_query_id())
        .end_cell();
        return send_raw_message(msg, SEND_MODE_CARRY_ALL_BALANCE | SEND_MODE_IGNORE_ERRORS);
    }

    if (op == op::withdraw_jettons) {
        throw_unless(error::unauthorized_transfer, equal_slice_bits(owner_address, sender_address));
        throw_if(error::locked_wallet, locked == 1);
        int query_id = in_msg_body~load_query_id();
        slice child_wallet =  in_msg_body~load_msg_addr();
        int amount =  in_msg_body~load_coins();
        cell custom_payload = in_msg_body~load_maybe_ref();
        var msg = begin_cell()
            .store_msg_flag(msg_flag::bounceable)
            .store_slice(child_wallet)
            .store_coins(0)
            .store_msgbody_prefix_ref(
                begin_cell()
                    .store_op(op::transfer)
                    .store_query_id(query_id)
                    .store_coins(amount)
                    .store_slice(owner_address)
                    .store_slice(owner_address)
                    .store_maybe_ref(custom_payload)
                    .store_coins(0)
                    .store_int(false, 1)
                .end_cell()
            )
        .end_cell();
        return send_raw_message(msg, SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);
    }

    if (op == op::unlock_wallet) {
        throw_unless(error::unauthorized_unlock_request, equal_slice_bits(owner_address, sender_address));
        if (locked == 0) {
            send_raw_message(
                begin_cell()
                    .store_op(0x10)
                    .store_slice(sender_address)
                    .store_coins(0)
                .end_cell(),
                SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE
            );
            return ();
        }

        send_raw_message(
            begin_cell()
                .store_op(0x10)
                .store_slice(jetton_master_address)
                .store_coins(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_op(op::unlock_wallet_callback)
                .store_query_id(0)
                .store_slice(sender_address)
            .end_cell(),
            SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE
        );
        return ();
    }

    if (op == op::unlock_wallet_excess) {
        throw_unless(error::unauthorized_unlock_request, equal_slice_bits(jetton_master_address, sender_address));
        save_data(0, balance, owner_address, jetton_master_address, jetton_wallet_code);
    }

    throw(error::unknown_action);
}

(int, slice, slice, cell) get_wallet_data() method_id {
    (_, int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();
    return (balance, owner_address, jetton_master_address, jetton_wallet_code);
}

int get_is_locked() method_id {
    (int locked, _, _, _, _) = load_data();
    return locked;
}