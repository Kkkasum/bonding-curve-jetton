#include "../imports/stdlib.fc";
#include "op_codes.fc";
#include "errors.fc";
#include "utils.fc";

global slice storage::admin_address;
global int   storage::launch_fee;
global cell  storage::bc_jetton_minter_code;
global cell  storage::bc_jetton_wallet_code;
global slice storage::fee_address;
global slice storage::router_address;
global slice storage::router_pton_wallet_address;

() load_data() impure inline {
    slice ds = get_data().begin_parse();

    storage::admin_address = ds~load_msg_addr();
    storage::launch_fee = ds~load_coins();
    storage::bc_jetton_minter_code = ds~load_ref();
    storage::bc_jetton_wallet_code = ds~load_ref();
    storage::fee_address = ds~load_msg_addr();
    slice router_ds = ds~load_ref().begin_parse();
    storage::router_address = router_ds~load_msg_addr();
    storage::router_pton_wallet_address = router_ds~load_msg_addr();

    ds.end_parse();
}

() save_data() impure inline {
    set_data(
        begin_cell()
            .store_slice(storage::admin_address)
            .store_coins(storage::launch_fee)
            .store_ref(storage::bc_jetton_minter_code)
            .store_ref(storage::bc_jetton_wallet_code)
            .store_slice(storage::fee_address)
            .store_ref(
                begin_cell()
                    .store_slice(storage::router_address)
                    .store_slice(storage::router_pton_wallet_address)
                .end_cell()
            )
        .end_cell()
    );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();

    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    load_data();

    if (op == op::launch) {
        throw_if(error::launch_fee_not_matched, msg_value < storage::launch_fee);

        cell content = in_msg_body~load_ref();
        slice author_address = in_msg_body~load_msg_addr();

        cell state_init = calculate_bc_jetton_minter_state_init(storage::admin_address, content, storage::bc_jetton_wallet_code, author_address, storage::fee_address, storage::router_address, storage::router_pton_wallet_address, storage::bc_jetton_minter_code);
        slice to_address = calc_bc_jetton_minter_address(state_init);

        int tons_for_purchase = msg_value - storage::launch_fee;

        send_raw_message(
            begin_cell()
                .store_uint(0x18, 6)
                .store_slice(to_address)
                .store_coins(tons_for_purchase)
                .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
                .store_ref(state_init)
                .store_ref(
                    begin_cell()
                        .store_op(op::purchase)
                        .store_query_id(0)
                        .store_slice(sender_address)
                    .end_cell()
                )
            .end_cell(),
            0
        );

        return ();
    }

    throw_unless(error::unauthorized_change_fee_address, equal_slice_bits(storage::admin_address, sender_address));

    if (op == op::change_fee_address) {
        slice fee_address = in_msg_body~load_msg_addr();

        storage::fee_address = fee_address;

        save_data();
        return ();
    }

    if (op == op::withdraw_ton) {
        int amount = in_msg_body~load_coins();
        send_raw_message(
            begin_cell()
                .store_uint(0x18, 6)
                .store_slice(sender_address)
                .store_coins(amount)
            .end_cell(),
            0
        );
        return ();
    }

    if (op == op::upgrade) {
        cell new_data = in_msg_body~load_ref();
        cell new_code = in_msg_body~load_ref();
        set_data(new_data);
        set_code(new_code);
        return ();
    }

    throw(0xffff);
}

(slice, int, cell, cell, slice, slice) get_launch_data() method_id {
    load_data();
    return (
        storage::admin_address,
        storage::launch_fee,
        storage::bc_jetton_minter_code,
        storage::bc_jetton_wallet_code,
        storage::router_address,
        storage::router_pton_wallet_address
    );
}

slice get_minter_address(cell content, slice author_address) method_id {
    load_data();
    return calculate_bc_jetton_minter_address(storage::admin_address, content, storage::bc_jetton_wallet_code, author_address, storage::fee_address, storage::router_address, storage::router_pton_wallet_address, storage::bc_jetton_minter_code);
}